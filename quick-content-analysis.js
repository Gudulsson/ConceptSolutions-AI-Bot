/**
 * Snabb analys av den nuvarande AI-genererade artikeln
 * Visar vad som √§r "knasigt" med inneh√•llet
 */

const axios = require('axios');

async function analyzeCurrentArticle() {
    console.log('üîç Analyserar den nuvarande AI-artikeln...\n');
    
    try {
        // H√§mta den senaste draft-artikeln (ID 2964)
        const response = await axios.get('http://localhost:3000/api/wordpress/posts?status=draft');
        const drafts = response.data;
        
        if (drafts.length === 0) {
            console.log('‚ùå Inga draft-artiklar hittades');
            return;
        }
        
        // Hitta den senaste artikeln (h√∂gsta ID)
        const latestDraft = drafts.reduce((latest, current) => 
            current.id > latest.id ? current : latest
        );
        
        console.log(`üìÑ Analyserar artikel: "${latestDraft.title.rendered}" (ID: ${latestDraft.id})`);
        console.log('=' .repeat(60));
        
        const content = latestDraft.content.rendered;
        const title = latestDraft.title.rendered;
        
        // 1. Analysera inneh√•llsl√§ngd
        const wordCount = countWords(content);
        console.log(`\nüìä INNEH√ÖLLSL√ÑNGD:`);
        console.log(`   Ord: ${wordCount} (minimum: 800, optimalt: 1200)`);
        console.log(`   Status: ${wordCount < 800 ? '‚ùå F√ñR KORT' : wordCount < 1200 ? '‚ö†Ô∏è KAN F√ñRB√ÑTTRAS' : '‚úÖ BRA'}`);
        
        // 2. Analysera HTML-struktur
        console.log(`\nüèóÔ∏è HTML-STRUKTUR:`);
        const structureIssues = analyzeHTMLStructure(content);
        structureIssues.forEach(issue => console.log(`   ‚ùå ${issue}`));
        
        // 3. Analysera inneh√•llskvalitet
        console.log(`\nüìù INNEH√ÖLLSKVALITET:`);
        const contentIssues = analyzeContentQuality(content);
        contentIssues.forEach(issue => console.log(`   ‚ùå ${issue}`));
        
        // 4. Analysera interna l√§nkar
        console.log(`\nüîó INTERNA L√ÑNKAR:`);
        const linkCount = countInternalLinks(content);
        console.log(`   Antal l√§nkar: ${linkCount} (minimum: 3, optimalt: 5)`);
        console.log(`   Status: ${linkCount < 3 ? '‚ùå F√ñR F√Ö' : '‚úÖ BRA'}`);
        
        // 5. Visa problematiska delar
        console.log(`\nüö® PROBLEMATISKA DELAR:`);
        showProblematicParts(content);
        
        // 6. Sammanfattning
        console.log(`\nüìã SAMMANFATTNING:`);
        const totalIssues = structureIssues.length + contentIssues.length + (wordCount < 800 ? 1 : 0) + (linkCount < 3 ? 1 : 0);
        console.log(`   Totalt antal problem: ${totalIssues}`);
        console.log(`   Kvalitetsbed√∂mning: ${totalIssues > 5 ? '‚ùå MYCKET D√ÖLIG' : totalIssues > 3 ? '‚ö†Ô∏è D√ÖLIG' : totalIssues > 1 ? '‚ö†Ô∏è KAN F√ñRB√ÑTTRAS' : '‚úÖ BRA'}`);
        
        console.log(`\nüí° REKOMMENDATIONER:`);
        if (wordCount < 800) console.log('   ‚Ä¢ √ñka inneh√•llsl√§ngden till minst 800 ord');
        if (structureIssues.length > 0) console.log('   ‚Ä¢ Fixera HTML-struktur och kodning');
        if (contentIssues.some(i => i.includes('generisk'))) console.log('   ‚Ä¢ G√∂r inneh√•llet mer specifikt och relevant');
        if (linkCount < 3) console.log('   ‚Ä¢ L√§gg till fler interna l√§nkar');
        if (contentIssues.some(i => i.includes('HTML-kod'))) console.log('   ‚Ä¢ Ta bort HTML-kod som ska visas som text');
        
    } catch (error) {
        console.error('‚ùå Fel vid analys:', error.message);
    }
}

function countWords(text) {
    const cleanText = text.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
    return cleanText.split(' ').length;
}

function analyzeHTMLStructure(content) {
    const issues = [];
    
    // Kontrollera f√∂r felaktig HTML-kodning
    if (content.includes('&lt;') || content.includes('&gt;')) {
        issues.push('Inneh√•ller HTML-kod som ska visas som text (&lt; och &gt;)');
    }
    
    // Kontrollera f√∂r felaktiga rubriker
    if (content.includes('<h3>Unknown&lt;/h3</h3>')) {
        issues.push('Felaktig rubrikstruktur: <h3>Unknown&lt;/h3</h3>');
    }
    
    // Kontrollera f√∂r tomma eller felaktiga element
    if (content.includes('<h3></h3>') || content.includes('<h3>Unknown</h3>')) {
        issues.push('Tomma eller generiska rubriker');
    }
    
    // Kontrollera f√∂r felaktiga l√§nkar
    if (content.includes('/produkter/')) {
        issues.push('Felaktig l√§nk: /produkter/ (finns inte p√• sidan)');
    }
    
    return issues;
}

function analyzeContentQuality(content) {
    const issues = [];
    
    // Kontrollera f√∂r generiskt inneh√•ll
    if (content.includes('Detta √§r en generisk sektion')) {
        issues.push('Generiskt inneh√•ll: "Detta √§r en generisk sektion"');
    }
    
    if (content.includes('unknown')) {
        issues.push('Generiskt inneh√•ll: "unknown"');
    }
    
    // Kontrollera f√∂r korta eller tomma stycken
    const paragraphs = content.match(/<p[^>]*>(.*?)<\/p>/g);
    if (paragraphs) {
        const shortParagraphs = paragraphs.filter(p => {
            const text = p.replace(/<[^>]*>/g, '').trim();
            return text.length < 50;
        });
        if (shortParagraphs.length > 0) {
            issues.push(`${shortParagraphs.length} f√∂r korta stycken (< 50 tecken)`);
        }
    }
    
    // Kontrollera f√∂r felaktiga HTML-tecken
    if (content.includes('&#8211;') || content.includes('&hellip;')) {
        issues.push('Felaktiga HTML-entiteter som ska vara vanlig text');
    }
    
    return issues;
}

function countInternalLinks(content) {
    const links = content.match(/<a[^>]*href[^>]*>/gi);
    if (!links) return 0;
    
    let internalCount = 0;
    links.forEach(link => {
        if (link.includes('conceptsolutions.se') || link.includes('/produkt/') || link.includes('/tjanster/')) {
            internalCount++;
        }
    });
    
    return internalCount;
}

function showProblematicParts(content) {
    const lines = content.split('\n');
    
    lines.forEach((line, index) => {
        if (line.includes('Unknown') || 
            line.includes('generisk') || 
            line.includes('&lt;') || 
            line.includes('&gt;') ||
            line.includes('/produkter/')) {
            console.log(`   Rad ${index + 1}: ${line.trim()}`);
        }
    });
}

// K√∂r analysen
analyzeCurrentArticle().catch(console.error);
